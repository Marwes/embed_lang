let prelude = import "std/prelude.glu"
let map = import "std/map.glu"
let string = import "std/string.glu"
let { Map } = map
let { Eq, Option, Result, Monoid, List, id } = prelude
let { (==) } = string.eq
let (++) = string.monoid.(<>)
let { singleton, find, insert, monoid, to_list }
    = map.make string.ord
let { (<>), empty } = monoid


let load_file filename: String -> String =
    let last_slash =
        match string.rfind filename "/" with
            | None -> 0
            | Some i -> i + 1
    let modulename = string.slice filename last_slash (string.length filename - 3)
    let read_result =
        io.catch (\_ ->
            let x = io.read_file_to_string filename
            Ok x)
            (\err -> Err err)
    match read_result with
    | Ok expr -> io.load_script modulename expr
    | Err msg -> msg

let for xs f =
    match xs with
    | Cons y ys ->
        f y
        for ys f
    | Nil -> ()

type Cmd = { info: String, action: String -> Bool }

let commands: Map String Cmd =
    let commands = ref empty
    let cmds =
        singleton "q" { info = "Quit the REPL", action = \_ -> False }
            <> singleton "t" {
                info = "Prints the type with an expression",
                action = \arg ->
                    let result = repl_prim.type_of_expr arg
                    match result with
                    | Ok x -> io.print x
                    | Err x -> io.print x
                    True
            }
            <> singleton "i" {
                info = "Prints information about the given name",
                action = \arg ->
                    let result = repl_prim.find_info arg
                    match result with
                    | Ok x -> io.print x
                    | Err x -> io.print x
                    True
            }
            <> singleton "k" {
                info = "Prints the kind with the given type",
                action = \arg ->
                    let result = repl_prim.find_kind arg
                    match result with
                    | Ok x -> io.print x
                    | Err x -> io.print x
                    True
            }
            <> singleton "l" {
                info = "Loads the file at 'folder/module.ext' and stores it at 'module'",
                action = \arg ->
                    let contents = load_file arg
                    io.print contents
                    True
            }
            <>  singleton "h" {
                info = "Print this help",
                action = \_ ->
                    io.print "Available commands\n"
                    for (to_list (load commands)) (\cmd ->
                        //FIXME This type declaration should not be needed
                        let cmd: { key: String, value: Cmd } = cmd
                        io.print ("    :" ++ cmd.key ++ " " ++ cmd.value.info)
                    )
                    True
            }    
    commands <- cmds
    load commands

let do_command line: String -> Bool = 
    let cmd = string.slice line 1 2
    let arg = if string.length line >= 3 then string.trim (string.slice line 3 (string.length line)) else ""
    match find cmd commands with
    | Some command -> command.action arg
    | None ->
        io.print ("Unknown command '"  ++ cmd ++ "'")
        True

let store line: String -> Bool =
    let line = string.trim line
    match string.find line " " with
    | Some bind_end -> 
        let binding = string.slice line 0 bind_end
        let expr = string.slice line bind_end (string.length line)
        io.load_script binding expr
        True
    | None ->
        io.print "Expected binding in definition"
        True

let loop _: () -> () =
    let line = io.read_line
    let continue =
        if string.starts_with line ":" then
            do_command line
        else if string.starts_with line "def " then
            store (string.slice line 4 (string.length line))
        else
            let r = io.catch (\_ -> io.run_expr line) id
            io.print r
            True

    if continue then
        loop ()
    else
        ()

loop
